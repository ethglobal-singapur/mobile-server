/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Passport {
  export type CountryStruct = { name: string; date: string; isVisit: boolean };

  export type CountryStructOutput = [
    name: string,
    date: string,
    isVisit: boolean
  ] & { name: string; date: string; isVisit: boolean };

  export type PersonStruct = {
    name: string;
    document_number: string;
    surname: string;
    country: string;
    birthdate: string;
    countries: Passport.CountryStruct[];
  };

  export type PersonStructOutput = [
    name: string,
    document_number: string,
    surname: string,
    country: string,
    birthdate: string,
    countries: Passport.CountryStructOutput[]
  ] & {
    name: string;
    document_number: string;
    surname: string;
    country: string;
    birthdate: string;
    countries: Passport.CountryStructOutput[];
  };
}

export interface PassportInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCountryToPerson"
      | "addPerson"
      | "getAllPeople"
      | "getPerson"
      | "isPersonExist"
      | "persons"
      | "persons_map"
      | "removeAllPeople"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCountryToPerson",
    values: [
      Passport.CountryStruct,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPerson",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      Passport.CountryStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPeople",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPerson", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPersonExist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "persons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "persons_map", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAllPeople",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCountryToPerson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPerson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPeople",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPerson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPersonExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "persons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "persons_map",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllPeople",
    data: BytesLike
  ): Result;
}

export interface Passport extends BaseContract {
  connect(runner?: ContractRunner | null): Passport;
  waitForDeployment(): Promise<this>;

  interface: PassportInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCountryToPerson: TypedContractMethod<
    [
      visited_country: Passport.CountryStruct,
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string,
      _date: string
    ],
    [void],
    "nonpayable"
  >;

  addPerson: TypedContractMethod<
    [
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string,
      _date: string,
      _countries: Passport.CountryStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getAllPeople: TypedContractMethod<
    [],
    [Passport.PersonStructOutput[]],
    "view"
  >;

  getPerson: TypedContractMethod<[_document_number: string], [string], "view">;

  isPersonExist: TypedContractMethod<
    [_document_number: string],
    [boolean],
    "view"
  >;

  persons: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string] & {
        name: string;
        document_number: string;
        surname: string;
        country: string;
        birthdate: string;
      }
    ],
    "view"
  >;

  persons_map: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string] & {
        name: string;
        document_number: string;
        surname: string;
        country: string;
        birthdate: string;
      }
    ],
    "view"
  >;

  removeAllPeople: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCountryToPerson"
  ): TypedContractMethod<
    [
      visited_country: Passport.CountryStruct,
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string,
      _date: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPerson"
  ): TypedContractMethod<
    [
      _document_number: string,
      _name: string,
      _surname: string,
      _country: string,
      _birthdate: string,
      _date: string,
      _countries: Passport.CountryStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPeople"
  ): TypedContractMethod<[], [Passport.PersonStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPerson"
  ): TypedContractMethod<[_document_number: string], [string], "view">;
  getFunction(
    nameOrSignature: "isPersonExist"
  ): TypedContractMethod<[_document_number: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "persons"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string] & {
        name: string;
        document_number: string;
        surname: string;
        country: string;
        birthdate: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "persons_map"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string] & {
        name: string;
        document_number: string;
        surname: string;
        country: string;
        birthdate: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAllPeople"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
